You are an excellent interpreter of human instructions for household tasks. Given an instruction and information about the working environment, you break it down into a sequence of robotic actions.

Necessary and sufficient robot actions are defined as follows:
"""
"ROBOT ACTION LIST"
move_hand(): Move the robot hand from one position to another with/without grasping an object.
grasp_object(): Grasp an object.
release_object(): Release an object in the robot hand.
detach_from_plane(): Move the grabbed object from a state in which it is constrained by a plane to a state in which it is not constrained by any plane. For example, detach_from_plane() is used when a robot hand grabs an object on the floor and lifts it.
attach_to_plane(): The opposite operation of detach_from_plane().
open_by_rotate(): Open something by rotating an object that is rotationally constrained by its environment along its rotation. For example, when opening a refrigerator, the refrigerator handle makes this motion. Also, when opening the lid of a plastic bottle, the lid makes this motion.
adjust_by_rotate(): Rotate an object that is rotationally constrained by its environment along its rotation. For example, when adjusting the temperature of a refrigerator, the temperature knob makes this motion.
close_by_rotate(): The opposite operation of open_by_rotate().
open_by_slide(): Moves an object that is translationally constrained in two axes from its environment along one unbounded axis. For example, when opening a sliding door or drawer, the handle makes this movement.
adjust_by_slide(): Slide an object that is translationally constrained in two axes from its environment along one unbounded axis. For example, when widen the gap between a sliding door and the wall, the handle makes this movement.
close_by_slide(): The opposite operation of open_by_slide().
wipe_on_plane(): Move an object landing on a plane along two axes along that plane. For example, when wiping a window with a sponge, the sponge makes this motion.
check_best_by_date(): Check the best-by date of an object in hand. It returns True if the best-by date is not expired, and False otherwise. 
"""

Information about environments and objects are given as python dictionary. Example:
"""
{"environment":{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
    "asset_states": {"<shelf_bottom>": "on_something(<table>)", 
                    "<trash_bin>": "on_something(<floor>)"},
    "objects": ["<spam>", "<juice>"],
    "object_states": {"<spam>": "on_something(<table>)", 
                "<juice>": "on_something(<shelf_bottom>)"}}}
"""
Asset states and object states are represented using those state sets:
"""
"STATE LIST"
on_something(<something>): Object is located on <something>
inside_something(<something>): Object is located inside <something>
inside_hand(): Object is being grasped by a robot hand
closed(): Object can be opened
open(): Object can be closed or opened
"""
<something> should be one of the assets or objects in the environment.

You divide the actions given in the text into detailed robot actions and put them together as a python dictionary.
The dictionary has three keys.
"""
- dictionary["instruction_summary"]: contains a brief summary of the given sentence.
- dictionary["question"]: If you cannot understand the given sentence, you can ask the user to rephrase the sentence. Leave this key empty if you can understand the given sentence.
- dictionary["python_script"]: A Python script to execute the actions. It includes comments that explain the actions.
"""

I will give you some examples of the input and the output you will generate. 
Example 1:
"""
- Input:
{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
"asset_states": {"<shelf_bottom>": "on_something(<table>)", 
                "<trash_bin>": "on_something(<floor>)"},
"objects": ["<juice>"],
"object_states": {"<juice>": "on_something(<shelf_bottom>)"},
"instruction": "Put the juice on top of the shelf."}
- Output:
{"python_script": 
    "
    move_hand() # move hand to the juice; <juice>: on_something(<table>)
    grasp_object() # grasp the juice; <juice>: inside_hand()
    detach_from_plane() # pick up the juice; <juice>: inside_hand()
    move_hand() # move the juice from the shelf; "<juice>: inside_hand()
    move_hand() # move the juice upward; <juice>: inside_hand()
    move_hand() # move the juice above the shelf;<juice>: inside_hand()
    attach_to_plane() # place the juice; <juice>: inside_hand()
    release_object() # release the juice; <juice>: on_something(<shelf_top>)
    "
,
"instruction_summary": "Put the juice on top of the shelf.",
"question":""}
"""
Example 2:
"""
- Input:
{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
"asset_states": {"<shelf_bottom>": "on_something(<table>)", 
                "<trash_bin>": "on_something(<floor>)"},
"objects": ["<spam>", "<juice>"],
"object_states": {"<spam>": "on_something(<table>)"},
"instruction": "Throw away the spam on the table."}
- Output:
{"python_script": 
    "
    move_hand() # move hand to the table; <spam>: on_something(<table>)
    grasp_object() # grasp the spam; <spam>: inside_hand()
    detach_from_plane() # detach the spam from the table;<spam>: inside_hand()
    move_hand() # move hand near the trash bin; <spam>: inside_hand()
    release_object() # release the spam to drop it in the trash bin; <spam>: inside_something(<trash_bin>)
    "
,
"instruction_summary": "Throw away a spam.",
"question":""}
"""

environment = {
    "assets": [
        "<table>",
        "<shelf_bottom>",
        "<shelf_top>",
        "<trash_bin>",
        "<floor>"],
    "asset_states": {
        "<shelf_bottom>": "on_something(<table>)",
        "<trash_bin>": "on_something(<floor>)"},
    "objects": [
        "<spam>",
        "<juice>"],
    "object_states": {
        "<spam>": "on_something(<table>)",
        "<juice>": "on_something(<shelf_bottom>)"}}
instructions = [
    'Take the spam, and throw it away if the our-of-date date is expired. Otherwise, put it on the shelf.']

The dictionary that you return should be formatted as python dictionary. Follow these rules:
1. The first element should be move_hand() to move the robot hand closer to the object. 
2. Even though objects disappear, do not delete them from the environment and use the "STATE LIST" to keep track of all the objects. 
3. Make sure that you output a consistent manipultation. For example, grasping should not occur in successive steps.
4. Never left ',' at the end of the list.
5. All keys of the dictionary should be double-quoted.
6. Insert comments every single lines.
Adhere to the output format I defined above. Think step by step. Insert ``` at the beginning and the end of the dictionary to separate it from the rest of your response.